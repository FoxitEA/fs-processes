<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentsAndArgumentsListInitialized" xml:space="preserve">
    <value>Only one of Arguments or ArgumentList may be used.</value>
  </data>
  <data name="CantGetStandardStream" xml:space="preserve">
    <value>{0} has not been redirected.</value>
  </data>
  <data name="CantMixSyncAsyncOperation" xml:space="preserve">
    <value>Cannot mix synchronous and asynchronous operation on process stream.</value>
  </data>
  <data name="CantSetDuplicatePassword" xml:space="preserve">
    <value>CreateProcessInfo.Password and CreateProcessInfo.PasswordInClearText cannot both be set. Use only one of them.</value>
  </data>
  <data name="DuplicateCompletionKey" xml:space="preserve">
    <value>The supplied key is already in use. This probably indicates a race condition with a reused handle.</value>
  </data>
  <data name="FileNameMissing" xml:space="preserve">
    <value>Cannot start process because a file name has not been provided.</value>
  </data>
  <data name="HotKeyWithRedirection" xml:space="preserve">
    <value>The HotKey property cannot be used when standard input, error or output is redirected.</value>
  </data>
  <data name="InstanceIsReadOnly" xml:space="preserve">
    <value>The object instance is read only.</value>
  </data>
  <data name="InvalidAppIdTitle" xml:space="preserve">
    <value>The Title cannot be null, empty or consist only of whitespace when used as an AppID.</value>
  </data>
  <data name="InvalidApplication" xml:space="preserve">
    <value>The specified executable is not a valid application for this OS platform.</value>
  </data>
  <data name="InvalidLinkNameTitle" xml:space="preserve">
    <value>The Title cannot be null, empty or consist only of whitespace when used as a LinkName.</value>
  </data>
  <data name="PendingAsyncOperation" xml:space="preserve">
    <value>An async read operation has already been started on the stream.</value>
  </data>
  <data name="PreventPinningOnlyWithAppIdTitle" xml:space="preserve">
    <value>PreventPinning cannot be used unless TitleIs is also set to TitleIs.AppID.</value>
  </data>
  <data name="ProcessHandleClosedOrInvalid" xml:space="preserve">
    <value>The process handle is closed or invalid.</value>
  </data>
  <data name="ProcessOptionsInvalid" xml:space="preserve">
    <value>The combination of options is not valid.</value>
  </data>
  <data name="StandardErrorEncodingNotAllowed" xml:space="preserve">
    <value>StandardErrorEncoding is only supported when standard error is redirected.</value>
  </data>
  <data name="StandardInputEncodingNotAllowed" xml:space="preserve">
    <value>StandardInputEncoding is only supported when standard input is redirected.</value>
  </data>
  <data name="StandardOutputEncodingNotAllowed" xml:space="preserve">
    <value>StandardOutputEncoding is only supported when standard output is redirected.</value>
  </data>
  <data name="WaitTillExit" xml:space="preserve">
    <value>Process must exit before requested information can be determined.</value>
  </data>
</root>